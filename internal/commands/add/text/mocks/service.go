// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/service.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	input "github.com/nayakunin/gophkeeper/internal/commands/add/text/input"
	generated "github.com/nayakunin/gophkeeper/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// AddTextData mocks base method.
func (m *MockApi) AddTextData(ctx context.Context, in *generated.AddTextDataRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextData", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextData indicates an expected call of AddTextData.
func (mr *MockApiMockRecorder) AddTextData(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextData", reflect.TypeOf((*MockApi)(nil).AddTextData), ctx, in)
}

// MockApiPreparer is a mock of ApiPreparer interface.
type MockApiPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockApiPreparerMockRecorder
}

// MockApiPreparerMockRecorder is the mock recorder for MockApiPreparer.
type MockApiPreparerMockRecorder struct {
	mock *MockApiPreparer
}

// NewMockApiPreparer creates a new mock instance.
func NewMockApiPreparer(ctrl *gomock.Controller) *MockApiPreparer {
	mock := &MockApiPreparer{ctrl: ctrl}
	mock.recorder = &MockApiPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiPreparer) EXPECT() *MockApiPreparerMockRecorder {
	return m.recorder
}

// PrepareTextRequest mocks base method.
func (m *MockApiPreparer) PrepareTextRequest(result *input.ParseTextResult, encryptionKey []byte) (*generated.AddTextDataRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareTextRequest", result, encryptionKey)
	ret0, _ := ret[0].(*generated.AddTextDataRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareTextRequest indicates an expected call of PrepareTextRequest.
func (mr *MockApiPreparerMockRecorder) PrepareTextRequest(result, encryptionKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareTextRequest", reflect.TypeOf((*MockApiPreparer)(nil).PrepareTextRequest), result, encryptionKey)
}

// MockCredentialsService is a mock of CredentialsService interface.
type MockCredentialsService struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsServiceMockRecorder
}

// MockCredentialsServiceMockRecorder is the mock recorder for MockCredentialsService.
type MockCredentialsServiceMockRecorder struct {
	mock *MockCredentialsService
}

// NewMockCredentialsService creates a new mock instance.
func NewMockCredentialsService(ctrl *gomock.Controller) *MockCredentialsService {
	mock := &MockCredentialsService{ctrl: ctrl}
	mock.recorder = &MockCredentialsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsService) EXPECT() *MockCredentialsServiceMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method.
func (m *MockCredentialsService) GetCredentials() (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialsServiceMockRecorder) GetCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialsService)(nil).GetCredentials))
}

// MockEncryption is a mock of Encryption interface.
type MockEncryption struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionMockRecorder
}

// MockEncryptionMockRecorder is the mock recorder for MockEncryption.
type MockEncryptionMockRecorder struct {
	mock *MockEncryption
}

// NewMockEncryption creates a new mock instance.
func NewMockEncryption(ctrl *gomock.Controller) *MockEncryption {
	mock := &MockEncryption{ctrl: ctrl}
	mock.recorder = &MockEncryptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryption) EXPECT() *MockEncryptionMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncryption) Encrypt(text, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", text, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionMockRecorder) Encrypt(text, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryption)(nil).Encrypt), text, key)
}
