// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/service.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	output "github.com/nayakunin/gophkeeper/internal/commands/get/binary/output"
	generated "github.com/nayakunin/gophkeeper/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// GetBinaryData mocks base method.
func (m *MockApi) GetBinaryData(ctx context.Context) (*generated.GetBinaryDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryData", ctx)
	ret0, _ := ret[0].(*generated.GetBinaryDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinaryData indicates an expected call of GetBinaryData.
func (mr *MockApiMockRecorder) GetBinaryData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryData", reflect.TypeOf((*MockApi)(nil).GetBinaryData), ctx)
}

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}

// MakeResponse mocks base method.
func (m *MockOutput) MakeResponse(response *generated.GetBinaryDataResponse, encryptionKey []byte) ([]output.BinaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeResponse", response, encryptionKey)
	ret0, _ := ret[0].([]output.BinaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeResponse indicates an expected call of MakeResponse.
func (mr *MockOutputMockRecorder) MakeResponse(response, encryptionKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeResponse", reflect.TypeOf((*MockOutput)(nil).MakeResponse), response, encryptionKey)
}

// MockCredentialsService is a mock of CredentialsService interface.
type MockCredentialsService struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsServiceMockRecorder
}

// MockCredentialsServiceMockRecorder is the mock recorder for MockCredentialsService.
type MockCredentialsServiceMockRecorder struct {
	mock *MockCredentialsService
}

// NewMockCredentialsService creates a new mock instance.
func NewMockCredentialsService(ctrl *gomock.Controller) *MockCredentialsService {
	mock := &MockCredentialsService{ctrl: ctrl}
	mock.recorder = &MockCredentialsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsService) EXPECT() *MockCredentialsServiceMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method.
func (m *MockCredentialsService) GetCredentials() (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialsServiceMockRecorder) GetCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialsService)(nil).GetCredentials))
}

// MockEncryption is a mock of Encryption interface.
type MockEncryption struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionMockRecorder
}

// MockEncryptionMockRecorder is the mock recorder for MockEncryption.
type MockEncryptionMockRecorder struct {
	mock *MockEncryption
}

// NewMockEncryption creates a new mock instance.
func NewMockEncryption(ctrl *gomock.Controller) *MockEncryption {
	mock := &MockEncryption{ctrl: ctrl}
	mock.recorder = &MockEncryptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryption) EXPECT() *MockEncryptionMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncryption) Decrypt(data, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", data, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptionMockRecorder) Decrypt(data, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryption)(nil).Decrypt), data, key)
}
