// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/service.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	database "github.com/nayakunin/gophkeeper/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddBankCardDetails mocks base method.
func (m *MockStorage) AddBankCardDetails(ctx context.Context, userID int64, cardName string, encryptedCardNumber, encryptedExpiryDate, encryptedCVC []byte, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBankCardDetails", ctx, userID, cardName, encryptedCardNumber, encryptedExpiryDate, encryptedCVC, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBankCardDetails indicates an expected call of AddBankCardDetails.
func (mr *MockStorageMockRecorder) AddBankCardDetails(ctx, userID, cardName, encryptedCardNumber, encryptedExpiryDate, encryptedCVC, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBankCardDetails", reflect.TypeOf((*MockStorage)(nil).AddBankCardDetails), ctx, userID, cardName, encryptedCardNumber, encryptedExpiryDate, encryptedCVC, description)
}

// AddBinaryData mocks base method.
func (m *MockStorage) AddBinaryData(ctx context.Context, userID int64, binary []byte, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBinaryData", ctx, userID, binary, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBinaryData indicates an expected call of AddBinaryData.
func (mr *MockStorageMockRecorder) AddBinaryData(ctx, userID, binary, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinaryData", reflect.TypeOf((*MockStorage)(nil).AddBinaryData), ctx, userID, binary, description)
}

// AddLoginPasswordPair mocks base method.
func (m *MockStorage) AddLoginPasswordPair(ctx context.Context, userID int64, serviceName, login string, encryptedPassword []byte, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLoginPasswordPair", ctx, userID, serviceName, login, encryptedPassword, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLoginPasswordPair indicates an expected call of AddLoginPasswordPair.
func (mr *MockStorageMockRecorder) AddLoginPasswordPair(ctx, userID, serviceName, login, encryptedPassword, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLoginPasswordPair", reflect.TypeOf((*MockStorage)(nil).AddLoginPasswordPair), ctx, userID, serviceName, login, encryptedPassword, description)
}

// AddTextData mocks base method.
func (m *MockStorage) AddTextData(ctx context.Context, userID int64, text []byte, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTextData", ctx, userID, text, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTextData indicates an expected call of AddTextData.
func (mr *MockStorageMockRecorder) AddTextData(ctx, userID, text, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTextData", reflect.TypeOf((*MockStorage)(nil).AddTextData), ctx, userID, text, description)
}

// GetBankCardDetails mocks base method.
func (m *MockStorage) GetBankCardDetails(ctx context.Context, userID int64, cardName string) ([]database.BankCardDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardDetails", ctx, userID, cardName)
	ret0, _ := ret[0].([]database.BankCardDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardDetails indicates an expected call of GetBankCardDetails.
func (mr *MockStorageMockRecorder) GetBankCardDetails(ctx, userID, cardName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardDetails", reflect.TypeOf((*MockStorage)(nil).GetBankCardDetails), ctx, userID, cardName)
}

// GetBinaryData mocks base method.
func (m *MockStorage) GetBinaryData(ctx context.Context, userID int64) ([]database.BinaryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryData", ctx, userID)
	ret0, _ := ret[0].([]database.BinaryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinaryData indicates an expected call of GetBinaryData.
func (mr *MockStorageMockRecorder) GetBinaryData(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryData", reflect.TypeOf((*MockStorage)(nil).GetBinaryData), ctx, userID)
}

// GetLoginPasswordPairs mocks base method.
func (m *MockStorage) GetLoginPasswordPairs(ctx context.Context, userID int64, serviceName string) ([]database.LoginPasswordPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPasswordPairs", ctx, userID, serviceName)
	ret0, _ := ret[0].([]database.LoginPasswordPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginPasswordPairs indicates an expected call of GetLoginPasswordPairs.
func (mr *MockStorageMockRecorder) GetLoginPasswordPairs(ctx, userID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPasswordPairs", reflect.TypeOf((*MockStorage)(nil).GetLoginPasswordPairs), ctx, userID, serviceName)
}

// GetTextData mocks base method.
func (m *MockStorage) GetTextData(ctx context.Context, userID int64) ([]database.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextData", ctx, userID)
	ret0, _ := ret[0].([]database.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextData indicates an expected call of GetTextData.
func (mr *MockStorageMockRecorder) GetTextData(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextData", reflect.TypeOf((*MockStorage)(nil).GetTextData), ctx, userID)
}

// MockEncryption is a mock of Encryption interface.
type MockEncryption struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionMockRecorder
}

// MockEncryptionMockRecorder is the mock recorder for MockEncryption.
type MockEncryptionMockRecorder struct {
	mock *MockEncryption
}

// NewMockEncryption creates a new mock instance.
func NewMockEncryption(ctrl *gomock.Controller) *MockEncryption {
	mock := &MockEncryption{ctrl: ctrl}
	mock.recorder = &MockEncryptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryption) EXPECT() *MockEncryptionMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncryption) Decrypt(text, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", text, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptionMockRecorder) Decrypt(text, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryption)(nil).Decrypt), text, key)
}

// Encrypt mocks base method.
func (m *MockEncryption) Encrypt(text, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", text, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionMockRecorder) Encrypt(text, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryption)(nil).Encrypt), text, key)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}
